!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_run	configure	/^ac_fn_cxx_try_run ()$/;"	f
ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	f
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ALLSPHINXOPTS	docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
Args	include/klang/AST/ASTNodes.h	/^    std::vector<ExprAST*> Args;$/;"	m	class:klang::CallExprAST	access:private
Args	include/klang/AST/ASTNodes.h	/^    std::vector<std::string> Args;$/;"	m	class:klang::PrototypeAST	access:private
ASTNodes.cpp	lib/AST/ASTNodes.cpp	1;"	F
ASTNodes.h	include/klang/AST/ASTNodes.h	1;"	F
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
AutoRegen.sh	autoconf/AutoRegen.sh	1;"	F
BinaryExprAST	include/klang/AST/ASTNodes.h	/^    BinaryExprAST(char op, ExprAST *lhs, ExprAST *rhs)$/;"	f	class:klang::BinaryExprAST	access:public	signature:(char op, ExprAST *lhs, ExprAST *rhs)
BinaryExprAST	include/klang/AST/ASTNodes.h	/^  class BinaryExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
BinaryExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *BinaryExprAST::Codegen() {$/;"	f	class:BinaryExprAST	signature:()
BinopPrecedence	include/klang/Lex/Token.h	/^    static std::map<char, int> BinopPrecedence;$/;"	m	class:klang::Token	access:public
BinopPrecedence	tools/driver/Driver.cpp	/^  std::map<char, int> Token::BinopPrecedence;$/;"	m	class:klang::Token	file:
Body	include/klang/AST/ASTNodes.h	/^    ExprAST *Body;$/;"	m	class:klang::FunctionAST	access:private
Body	include/klang/AST/ASTNodes.h	/^    ExprAST *Body;$/;"	m	class:klang::VarExprAST	access:private
Body	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
BUILDDIR	docs/Makefile	/^BUILDDIR      = _build$/;"	m
Callee	include/klang/AST/ASTNodes.h	/^    std::string Callee;$/;"	m	class:klang::CallExprAST	access:private
CallExprAST	include/klang/AST/ASTNodes.h	/^    CallExprAST(const std::string &callee, std::vector<ExprAST*> &args)$/;"	f	class:klang::CallExprAST	access:public	signature:(const std::string &callee, std::vector<ExprAST*> &args)
CallExprAST	include/klang/AST/ASTNodes.h	/^  class CallExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
CallExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *CallExprAST::Codegen() {$/;"	f	class:CallExprAST	signature:()
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::BinaryExprAST	access:public	signature:(const ExprAST *E)
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::CallExprAST	access:public	signature:(const ExprAST *E)
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::ForExprAST	access:public	signature:(const ExprAST *E)
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::IfExprAST	access:public	signature:(const ExprAST *E)
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::NumberExprAST	access:public	signature:(const ExprAST *E)
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::UnaryExprAST	access:public	signature:(const ExprAST *E)
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::VarExprAST	access:public	signature:(const ExprAST *E)
classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::VariableExprAST	access:public	signature:(const ExprAST *E)
Codegen	include/klang/AST/ASTNodes.h	/^    llvm::Function *Codegen();$/;"	p	class:klang::FunctionAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    llvm::Function *Codegen();$/;"	p	class:klang::PrototypeAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen() = 0;$/;"	p	class:klang::ExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::BinaryExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::CallExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::ForExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::IfExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::NumberExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::UnaryExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::VarExprAST	access:public	signature:()
Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::VariableExprAST	access:public	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Function *FunctionAST::Codegen() {$/;"	f	class:FunctionAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Function *PrototypeAST::Codegen() {$/;"	f	class:PrototypeAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *BinaryExprAST::Codegen() {$/;"	f	class:BinaryExprAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *CallExprAST::Codegen() {$/;"	f	class:CallExprAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *ForExprAST::Codegen() {$/;"	f	class:ForExprAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *IfExprAST::Codegen() {$/;"	f	class:IfExprAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *NumberExprAST::Codegen() {$/;"	f	class:NumberExprAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *UnaryExprAST::Codegen() {$/;"	f	class:UnaryExprAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *VarExprAST::Codegen() {$/;"	f	class:VarExprAST	signature:()
Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *VariableExprAST::Codegen() {$/;"	f	class:VariableExprAST	signature:()
Cond	include/klang/AST/ASTNodes.h	/^    ExprAST *Cond, *Then, *Else;$/;"	m	class:klang::IfExprAST	access:private
conf.py	docs/conf.py	1;"	F
config.guess	autoconf/config.guess	1;"	F
config.sub	autoconf/config.sub	1;"	F
configure	configure	1;"	F
copyright	docs/conf.py	/^copyright = u'2012, Journeyer J. Joh'$/;"	v
CreateArgumentAllocas	include/klang/AST/ASTNodes.h	/^    void CreateArgumentAllocas(llvm::Function *F);$/;"	p	class:klang::PrototypeAST	access:public	signature:(llvm::Function *F)
CreateArgumentAllocas	lib/AST/ASTNodes.cpp	/^void PrototypeAST::CreateArgumentAllocas(llvm::Function *F) {$/;"	f	class:PrototypeAST	signature:(llvm::Function *F)
CreateEntryBlockAlloca	lib/AST/ASTNodes.cpp	/^static llvm::AllocaInst *CreateEntryBlockAlloca(llvm::Function *TheFunction,$/;"	f	file:	signature:(llvm::Function *TheFunction, const std::string &VarName)
die	autoconf/AutoRegen.sh	/^die () {$/;"	f
DIRS	lib/Makefile	/^DIRS=AST Lex Parse Builtin$/;"	m
DIRS	Makefile	/^DIRS = lib tools$/;"	m
DIRS	tools/Makefile	/^DIRS=driver$/;"	m
Driver.cpp	tools/driver/Driver.cpp	1;"	F
Driver.h	include/klang/Driver/Driver.h	1;"	F
EK_Binary	include/klang/AST/ASTNodes.h	/^			EK_Binary,$/;"	e	enum:klang::ExprAST::ExprKind
EK_Call	include/klang/AST/ASTNodes.h	/^			EK_Call,$/;"	e	enum:klang::ExprAST::ExprKind
EK_For	include/klang/AST/ASTNodes.h	/^			EK_For,$/;"	e	enum:klang::ExprAST::ExprKind
EK_If	include/klang/AST/ASTNodes.h	/^			EK_If,$/;"	e	enum:klang::ExprAST::ExprKind
EK_Number	include/klang/AST/ASTNodes.h	/^			EK_Number,$/;"	e	enum:klang::ExprAST::ExprKind
EK_Unary	include/klang/AST/ASTNodes.h	/^			EK_Unary,$/;"	e	enum:klang::ExprAST::ExprKind
EK_Var	include/klang/AST/ASTNodes.h	/^			EK_Var,$/;"	e	enum:klang::ExprAST::ExprKind
EK_Variable	include/klang/AST/ASTNodes.h	/^			EK_Variable$/;"	e	enum:klang::ExprAST::ExprKind
Else	include/klang/AST/ASTNodes.h	/^    ExprAST *Cond, *Then, *Else;$/;"	m	class:klang::IfExprAST	access:private
End	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
epub_author	docs/conf.py	/^epub_author = u'Journeyer J. Joh'$/;"	v
epub_copyright	docs/conf.py	/^epub_copyright = u'2012, Journeyer J. Joh'$/;"	v
epub_publisher	docs/conf.py	/^epub_publisher = u'Journeyer J. Joh'$/;"	v
epub_title	docs/conf.py	/^epub_title = u'klang'$/;"	v
Error	include/klang/Driver/Utils.h	/^  ExprAST *Error(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
Error	tools/driver/Utils.cpp	/^  ExprAST *Error(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
ErrorF	include/klang/Driver/Utils.h	/^  FunctionAST *ErrorF(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
ErrorF	tools/driver/Utils.cpp	/^  FunctionAST *ErrorF(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
ErrorP	include/klang/Driver/Utils.h	/^  PrototypeAST *ErrorP(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
ErrorP	tools/driver/Utils.cpp	/^  PrototypeAST *ErrorP(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
ErrorV	include/klang/Driver/Utils.h	/^  llvm::Value *ErrorV(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
ErrorV	tools/driver/Utils.cpp	/^  llvm::Value *ErrorV(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
exclude_patterns	docs/conf.py	/^exclude_patterns = ['_build']$/;"	v
ExprAST	include/klang/AST/ASTNodes.h	/^		ExprAST(ExprKind K) : Kind(K) {}$/;"	f	class:klang::ExprAST	access:public	signature:(ExprKind K)
ExprAST	include/klang/AST/ASTNodes.h	/^  class ExprAST {$/;"	c	namespace:klang
ExprKind	include/klang/AST/ASTNodes.h	/^		enum ExprKind {$/;"	g	class:klang::ExprAST	access:public
extensions	docs/conf.py	/^extensions = ['sphinx.ext.todo', 'sphinx.ext.pngmath', 'sphinx.ext.mathjax']$/;"	v
EXTRA_DIST	Makefile	/^EXTRA_DIST = include$/;"	m
ForExprAST	include/klang/AST/ASTNodes.h	/^    ForExprAST(const std::string &varname, ExprAST *start, ExprAST *end,$/;"	f	class:klang::ForExprAST	access:public	signature:(const std::string &varname, ExprAST *start, ExprAST *end, ExprAST *step, ExprAST *body)
ForExprAST	include/klang/AST/ASTNodes.h	/^  class ForExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
ForExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *ForExprAST::Codegen() {$/;"	f	class:ForExprAST	signature:()
FunctionAST	include/klang/AST/ASTNodes.h	/^    FunctionAST(PrototypeAST *proto, ExprAST *body)$/;"	f	class:klang::FunctionAST	access:public	signature:(PrototypeAST *proto, ExprAST *body)
FunctionAST	include/klang/AST/ASTNodes.h	/^  class FunctionAST {$/;"	c	namespace:klang
FunctionAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Function *FunctionAST::Codegen() {$/;"	f	class:FunctionAST	signature:()
func_extract_an_archive	autoconf/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	autoconf/ltmain.sh	/^func_extract_archives ()$/;"	f
func_infer_tag	autoconf/ltmain.sh	/^func_infer_tag ()$/;"	f
func_mktempdir	autoconf/ltmain.sh	/^func_mktempdir ()$/;"	f
func_win32_libid	autoconf/ltmain.sh	/^func_win32_libid ()$/;"	f
getBinaryPrecedence	include/klang/AST/ASTNodes.h	/^    unsigned getBinaryPrecedence() const { return Precedence; }$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
getGlobalContext	tools/driver/Driver.cpp	/^  llvm::IRBuilder<> Builder(llvm::getGlobalContext());$/;"	p	namespace:klang	file:	signature:()
getKind	include/klang/AST/ASTNodes.h	/^		ExprKind getKind() const { return Kind; }$/;"	f	class:klang::ExprAST	access:public	signature:() const
getName	include/klang/AST/ASTNodes.h	/^    const std::string &getName() const { return Name; }$/;"	f	class:klang::VariableExprAST	access:public	signature:() const
GetNextToken	include/klang/Parse/Parser.h	/^    int GetNextToken();$/;"	p	class:klang::Parser	access:public	signature:()
GetNextToken	lib/Parse/Parser.cpp	/^int Parser::GetNextToken() {$/;"	f	class:Parser	signature:()
getOperatorName	include/klang/AST/ASTNodes.h	/^    char getOperatorName() const {$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
GetTokPrecedence	include/klang/Lex/Token.h	/^    int GetTokPrecedence();$/;"	p	class:klang::Token	access:private	signature:()
GetTokPrecedence	lib/Lex/Token.cpp	/^int Token::GetTokPrecedence() {$/;"	f	class:Token	signature:()
Go	include/klang/Parse/Parser.h	/^    void Go();$/;"	p	class:klang::Parser	access:public	signature:()
Go	lib/Parse/Parser.cpp	/^void Parser::Go() {$/;"	f	class:Parser	signature:()
HandleDefinition	include/klang/Parse/Parser.h	/^    void HandleDefinition();$/;"	p	class:klang::Parser	access:public	signature:()
HandleDefinition	lib/Parse/Parser.cpp	/^void Parser::HandleDefinition() {$/;"	f	class:Parser	signature:()
HandleExtern	include/klang/Parse/Parser.h	/^    void HandleExtern();$/;"	p	class:klang::Parser	access:public	signature:()
HandleExtern	lib/Parse/Parser.cpp	/^void Parser::HandleExtern() {$/;"	f	class:Parser	signature:()
HandleTopLevelExpression	include/klang/Parse/Parser.h	/^    void HandleTopLevelExpression();$/;"	p	class:klang::Parser	access:public	signature:()
HandleTopLevelExpression	lib/Parse/Parser.cpp	/^void Parser::HandleTopLevelExpression() {$/;"	f	class:Parser	signature:()
htmlhelp_basename	docs/conf.py	/^htmlhelp_basename = 'klangdoc'$/;"	v
html_theme	docs/conf.py	/^html_theme = 'haiku'$/;"	v
I18NSPHINXOPTS	docs/Makefile	/^I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
IdentifierStr	include/klang/Lex/Token.h	/^    std::string IdentifierStr;  \/\/ Filled in if tok_identifier$/;"	m	class:klang::Token	access:private
IfExprAST	include/klang/AST/ASTNodes.h	/^    IfExprAST(ExprAST *cond, ExprAST *then, ExprAST *_else)$/;"	f	class:klang::IfExprAST	access:public	signature:(ExprAST *cond, ExprAST *then, ExprAST *_else)
IfExprAST	include/klang/AST/ASTNodes.h	/^  class IfExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
IfExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *IfExprAST::Codegen() {$/;"	f	class:IfExprAST	signature:()
install-sh	autoconf/install-sh	1;"	F
isBinaryOp	include/klang/AST/ASTNodes.h	/^    bool isBinaryOp() const { return isOperator && Args.size() == 2; }$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
isOperator	include/klang/AST/ASTNodes.h	/^    bool isOperator;$/;"	m	class:klang::PrototypeAST	access:private
isUnaryOp	include/klang/AST/ASTNodes.h	/^    bool isUnaryOp() const { return isOperator && Args.size() == 1; }$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
Kind	include/klang/AST/ASTNodes.h	/^		const ExprKind Kind;$/;"	m	class:klang::ExprAST	access:private
Kind	include/klang/Lex/Token.h	/^    int Kind;$/;"	m	class:klang::Token	access:private
klang	include/klang/AST/ASTNodes.h	/^namespace klang {$/;"	n
klang	include/klang/Driver/Driver.h	/^namespace klang {$/;"	n
klang	include/klang/Driver/Utils.h	/^namespace klang {$/;"	n
klang	include/klang/Lex/Lexer.h	/^namespace klang {$/;"	n
klang	include/klang/Lex/Token.h	/^namespace klang {$/;"	n
klang	include/klang/Lex/TokenKinds.h	/^namespace klang {$/;"	n
klang	include/klang/Parse/Parser.h	/^namespace klang {$/;"	n
klang	tools/driver/Driver.cpp	/^namespace klang {$/;"	n	file:
klang	tools/driver/Utils.cpp	/^namespace klang {$/;"	n	file:
klang::BinaryExprAST	include/klang/AST/ASTNodes.h	/^  class BinaryExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::BinaryExprAST::BinaryExprAST	include/klang/AST/ASTNodes.h	/^    BinaryExprAST(char op, ExprAST *lhs, ExprAST *rhs)$/;"	f	class:klang::BinaryExprAST	access:public	signature:(char op, ExprAST *lhs, ExprAST *rhs)
klang::BinaryExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::BinaryExprAST	access:public	signature:(const ExprAST *E)
klang::BinaryExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::BinaryExprAST	access:public	signature:()
klang::BinaryExprAST::LHS	include/klang/AST/ASTNodes.h	/^    ExprAST *LHS, *RHS;$/;"	m	class:klang::BinaryExprAST	access:private
klang::BinaryExprAST::Op	include/klang/AST/ASTNodes.h	/^    char Op;$/;"	m	class:klang::BinaryExprAST	access:private
klang::BinaryExprAST::RHS	include/klang/AST/ASTNodes.h	/^    ExprAST *LHS, *RHS;$/;"	m	class:klang::BinaryExprAST	access:private
klang::CallExprAST	include/klang/AST/ASTNodes.h	/^  class CallExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::CallExprAST::Args	include/klang/AST/ASTNodes.h	/^    std::vector<ExprAST*> Args;$/;"	m	class:klang::CallExprAST	access:private
klang::CallExprAST::Callee	include/klang/AST/ASTNodes.h	/^    std::string Callee;$/;"	m	class:klang::CallExprAST	access:private
klang::CallExprAST::CallExprAST	include/klang/AST/ASTNodes.h	/^    CallExprAST(const std::string &callee, std::vector<ExprAST*> &args)$/;"	f	class:klang::CallExprAST	access:public	signature:(const std::string &callee, std::vector<ExprAST*> &args)
klang::CallExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::CallExprAST	access:public	signature:(const ExprAST *E)
klang::CallExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::CallExprAST	access:public	signature:()
klang::Error	include/klang/Driver/Utils.h	/^  ExprAST *Error(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
klang::Error	tools/driver/Utils.cpp	/^  ExprAST *Error(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
klang::ErrorF	include/klang/Driver/Utils.h	/^  FunctionAST *ErrorF(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
klang::ErrorF	tools/driver/Utils.cpp	/^  FunctionAST *ErrorF(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
klang::ErrorP	include/klang/Driver/Utils.h	/^  PrototypeAST *ErrorP(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
klang::ErrorP	tools/driver/Utils.cpp	/^  PrototypeAST *ErrorP(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
klang::ErrorV	include/klang/Driver/Utils.h	/^  llvm::Value *ErrorV(const char *Str);$/;"	p	namespace:klang	signature:(const char *Str)
klang::ErrorV	tools/driver/Utils.cpp	/^  llvm::Value *ErrorV(const char *Str) {$/;"	f	namespace:klang	signature:(const char *Str)
klang::ExprAST	include/klang/AST/ASTNodes.h	/^  class ExprAST {$/;"	c	namespace:klang
klang::ExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen() = 0;$/;"	p	class:klang::ExprAST	access:public	signature:()
klang::ExprAST::EK_Binary	include/klang/AST/ASTNodes.h	/^			EK_Binary,$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::EK_Call	include/klang/AST/ASTNodes.h	/^			EK_Call,$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::EK_For	include/klang/AST/ASTNodes.h	/^			EK_For,$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::EK_If	include/klang/AST/ASTNodes.h	/^			EK_If,$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::EK_Number	include/klang/AST/ASTNodes.h	/^			EK_Number,$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::EK_Unary	include/klang/AST/ASTNodes.h	/^			EK_Unary,$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::EK_Var	include/klang/AST/ASTNodes.h	/^			EK_Var,$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::EK_Variable	include/klang/AST/ASTNodes.h	/^			EK_Variable$/;"	e	enum:klang::ExprAST::ExprKind
klang::ExprAST::ExprAST	include/klang/AST/ASTNodes.h	/^		ExprAST(ExprKind K) : Kind(K) {}$/;"	f	class:klang::ExprAST	access:public	signature:(ExprKind K)
klang::ExprAST::ExprKind	include/klang/AST/ASTNodes.h	/^		enum ExprKind {$/;"	g	class:klang::ExprAST	access:public
klang::ExprAST::getKind	include/klang/AST/ASTNodes.h	/^		ExprKind getKind() const { return Kind; }$/;"	f	class:klang::ExprAST	access:public	signature:() const
klang::ExprAST::Kind	include/klang/AST/ASTNodes.h	/^		const ExprKind Kind;$/;"	m	class:klang::ExprAST	access:private
klang::ExprAST::~ExprAST	include/klang/AST/ASTNodes.h	/^    virtual ~ExprAST() {}$/;"	f	class:klang::ExprAST	access:public	signature:()
klang::ForExprAST	include/klang/AST/ASTNodes.h	/^  class ForExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::ForExprAST::Body	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
klang::ForExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::ForExprAST	access:public	signature:(const ExprAST *E)
klang::ForExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::ForExprAST	access:public	signature:()
klang::ForExprAST::End	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
klang::ForExprAST::ForExprAST	include/klang/AST/ASTNodes.h	/^    ForExprAST(const std::string &varname, ExprAST *start, ExprAST *end,$/;"	f	class:klang::ForExprAST	access:public	signature:(const std::string &varname, ExprAST *start, ExprAST *end, ExprAST *step, ExprAST *body)
klang::ForExprAST::Start	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
klang::ForExprAST::Step	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
klang::ForExprAST::VarName	include/klang/AST/ASTNodes.h	/^    std::string VarName;$/;"	m	class:klang::ForExprAST	access:private
klang::FunctionAST	include/klang/AST/ASTNodes.h	/^  class FunctionAST {$/;"	c	namespace:klang
klang::FunctionAST::Body	include/klang/AST/ASTNodes.h	/^    ExprAST *Body;$/;"	m	class:klang::FunctionAST	access:private
klang::FunctionAST::Codegen	include/klang/AST/ASTNodes.h	/^    llvm::Function *Codegen();$/;"	p	class:klang::FunctionAST	access:public	signature:()
klang::FunctionAST::FunctionAST	include/klang/AST/ASTNodes.h	/^    FunctionAST(PrototypeAST *proto, ExprAST *body)$/;"	f	class:klang::FunctionAST	access:public	signature:(PrototypeAST *proto, ExprAST *body)
klang::FunctionAST::Proto	include/klang/AST/ASTNodes.h	/^    PrototypeAST *Proto;$/;"	m	class:klang::FunctionAST	access:private
klang::getGlobalContext	tools/driver/Driver.cpp	/^  llvm::IRBuilder<> Builder(llvm::getGlobalContext());$/;"	p	namespace:klang	file:	signature:()
klang::IfExprAST	include/klang/AST/ASTNodes.h	/^  class IfExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::IfExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::IfExprAST	access:public	signature:(const ExprAST *E)
klang::IfExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::IfExprAST	access:public	signature:()
klang::IfExprAST::Cond	include/klang/AST/ASTNodes.h	/^    ExprAST *Cond, *Then, *Else;$/;"	m	class:klang::IfExprAST	access:private
klang::IfExprAST::Else	include/klang/AST/ASTNodes.h	/^    ExprAST *Cond, *Then, *Else;$/;"	m	class:klang::IfExprAST	access:private
klang::IfExprAST::IfExprAST	include/klang/AST/ASTNodes.h	/^    IfExprAST(ExprAST *cond, ExprAST *then, ExprAST *_else)$/;"	f	class:klang::IfExprAST	access:public	signature:(ExprAST *cond, ExprAST *then, ExprAST *_else)
klang::IfExprAST::Then	include/klang/AST/ASTNodes.h	/^    ExprAST *Cond, *Then, *Else;$/;"	m	class:klang::IfExprAST	access:private
klang::Lexer	include/klang/Lex/Lexer.h	/^  class Lexer {$/;"	c	namespace:klang
klang::Lexer::LastChar	include/klang/Lex/Lexer.h	/^    int LastChar;$/;"	m	class:klang::Lexer	access:private
klang::Lexer::Lex	include/klang/Lex/Lexer.h	/^    void Lex(Token &Result);$/;"	p	class:klang::Lexer	access:public	signature:(Token &Result)
klang::Lexer::Lexer	include/klang/Lex/Lexer.h	/^    Lexer();$/;"	p	class:klang::Lexer	access:public	signature:()
klang::NamedValues	tools/driver/Driver.cpp	/^  std::map<std::string, llvm::AllocaInst*> NamedValues;$/;"	m	namespace:klang	file:
klang::NumberExprAST	include/klang/AST/ASTNodes.h	/^  class NumberExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::NumberExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::NumberExprAST	access:public	signature:(const ExprAST *E)
klang::NumberExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::NumberExprAST	access:public	signature:()
klang::NumberExprAST::NumberExprAST	include/klang/AST/ASTNodes.h	/^    NumberExprAST(double val) : ExprAST(EK_Number), Val(val) {}$/;"	f	class:klang::NumberExprAST	access:public	signature:(double val)
klang::NumberExprAST::Val	include/klang/AST/ASTNodes.h	/^    double Val;$/;"	m	class:klang::NumberExprAST	access:private
klang::Parser	include/klang/Parse/Parser.h	/^  class Parser {$/;"	c	namespace:klang
klang::Parser::GetNextToken	include/klang/Parse/Parser.h	/^    int GetNextToken();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::Go	include/klang/Parse/Parser.h	/^    void Go();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::HandleDefinition	include/klang/Parse/Parser.h	/^    void HandleDefinition();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::HandleExtern	include/klang/Parse/Parser.h	/^    void HandleExtern();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::HandleTopLevelExpression	include/klang/Parse/Parser.h	/^    void HandleTopLevelExpression();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::Lxr	include/klang/Parse/Parser.h	/^    Lexer &Lxr;$/;"	m	class:klang::Parser	access:private
klang::Parser::ParseBinOpRHS	include/klang/Parse/Parser.h	/^    ExprAST *ParseBinOpRHS(int ExprPrec, ExprAST *LHS);$/;"	p	class:klang::Parser	access:public	signature:(int ExprPrec, ExprAST *LHS)
klang::Parser::ParseDefinition	include/klang/Parse/Parser.h	/^    FunctionAST *ParseDefinition();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseExpression	include/klang/Parse/Parser.h	/^    ExprAST *ParseExpression();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseExtern	include/klang/Parse/Parser.h	/^    PrototypeAST *ParseExtern();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseForExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseForExpr();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseIdentifierExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseIdentifierExpr();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseIfExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseIfExpr();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseNumberExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseNumberExpr();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseParenExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseParenExpr();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParsePrimary	include/klang/Parse/Parser.h	/^    ExprAST *ParsePrimary();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParsePrototype	include/klang/Parse/Parser.h	/^    PrototypeAST *ParsePrototype();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::Parser	include/klang/Parse/Parser.h	/^    Parser(Lexer &_Lxr)$/;"	f	class:klang::Parser	access:public	signature:(Lexer &_Lxr)
klang::Parser::ParseTopLevelExpr	include/klang/Parse/Parser.h	/^    FunctionAST *ParseTopLevelExpr();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseUnary	include/klang/Parse/Parser.h	/^    ExprAST *ParseUnary();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::ParseVarExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseVarExpr();$/;"	p	class:klang::Parser	access:public	signature:()
klang::Parser::Tok	include/klang/Parse/Parser.h	/^    Token Tok;$/;"	m	class:klang::Parser	access:private
klang::PrototypeAST	include/klang/AST/ASTNodes.h	/^  class PrototypeAST {$/;"	c	namespace:klang
klang::PrototypeAST::Args	include/klang/AST/ASTNodes.h	/^    std::vector<std::string> Args;$/;"	m	class:klang::PrototypeAST	access:private
klang::PrototypeAST::Codegen	include/klang/AST/ASTNodes.h	/^    llvm::Function *Codegen();$/;"	p	class:klang::PrototypeAST	access:public	signature:()
klang::PrototypeAST::CreateArgumentAllocas	include/klang/AST/ASTNodes.h	/^    void CreateArgumentAllocas(llvm::Function *F);$/;"	p	class:klang::PrototypeAST	access:public	signature:(llvm::Function *F)
klang::PrototypeAST::getBinaryPrecedence	include/klang/AST/ASTNodes.h	/^    unsigned getBinaryPrecedence() const { return Precedence; }$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
klang::PrototypeAST::getOperatorName	include/klang/AST/ASTNodes.h	/^    char getOperatorName() const {$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
klang::PrototypeAST::isBinaryOp	include/klang/AST/ASTNodes.h	/^    bool isBinaryOp() const { return isOperator && Args.size() == 2; }$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
klang::PrototypeAST::isOperator	include/klang/AST/ASTNodes.h	/^    bool isOperator;$/;"	m	class:klang::PrototypeAST	access:private
klang::PrototypeAST::isUnaryOp	include/klang/AST/ASTNodes.h	/^    bool isUnaryOp() const { return isOperator && Args.size() == 1; }$/;"	f	class:klang::PrototypeAST	access:public	signature:() const
klang::PrototypeAST::Name	include/klang/AST/ASTNodes.h	/^    std::string Name;$/;"	m	class:klang::PrototypeAST	access:private
klang::PrototypeAST::Precedence	include/klang/AST/ASTNodes.h	/^    unsigned Precedence;  \/\/ Precedence if a binary op.$/;"	m	class:klang::PrototypeAST	access:private
klang::PrototypeAST::PrototypeAST	include/klang/AST/ASTNodes.h	/^    PrototypeAST(const std::string &name, const std::vector<std::string> &args,$/;"	f	class:klang::PrototypeAST	access:public	signature:(const std::string &name, const std::vector<std::string> &args, bool isoperator = false, unsigned prec = 0)
klang::TheExecutionEngine	tools/driver/Driver.cpp	/^  llvm::ExecutionEngine *TheExecutionEngine;$/;"	m	namespace:klang	file:
klang::TheFPM	tools/driver/Driver.cpp	/^  llvm::FunctionPassManager *TheFPM;$/;"	m	namespace:klang	file:
klang::TheModule	tools/driver/Driver.cpp	/^  llvm::Module *TheModule;$/;"	m	namespace:klang	file:
klang::tok	include/klang/Lex/TokenKinds.h	/^  namespace tok {$/;"	n	namespace:klang
klang::tok::TokenKind	include/klang/Lex/TokenKinds.h	/^    enum TokenKind {$/;"	g	namespace:klang::tok
klang::tok::tok_binary	include/klang/Lex/TokenKinds.h	/^      tok_binary = -11,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_def	include/klang/Lex/TokenKinds.h	/^      tok_def = -2,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_else	include/klang/Lex/TokenKinds.h	/^      tok_else = -8,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_eof	include/klang/Lex/TokenKinds.h	/^      tok_eof = -1,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_extern	include/klang/Lex/TokenKinds.h	/^      tok_extern = -3,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_for	include/klang/Lex/TokenKinds.h	/^      tok_for = -9,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_identifier	include/klang/Lex/TokenKinds.h	/^      tok_identifier = -4,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_if	include/klang/Lex/TokenKinds.h	/^      tok_if = -6,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_in	include/klang/Lex/TokenKinds.h	/^      tok_in = -10,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_number	include/klang/Lex/TokenKinds.h	/^      tok_number = -5,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_then	include/klang/Lex/TokenKinds.h	/^      tok_then = -7,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_unary	include/klang/Lex/TokenKinds.h	/^      tok_unary = -12,$/;"	e	enum:klang::tok::TokenKind
klang::tok::tok_var	include/klang/Lex/TokenKinds.h	/^      tok_var = -13$/;"	e	enum:klang::tok::TokenKind
klang::Token	include/klang/Lex/Token.h	/^  class Token {$/;"	c	namespace:klang
klang::Token::BinopPrecedence	include/klang/Lex/Token.h	/^    static std::map<char, int> BinopPrecedence;$/;"	m	class:klang::Token	access:public
klang::Token::BinopPrecedence	tools/driver/Driver.cpp	/^  std::map<char, int> Token::BinopPrecedence;$/;"	m	class:klang::Token	file:
klang::Token::GetTokPrecedence	include/klang/Lex/Token.h	/^    int GetTokPrecedence();$/;"	p	class:klang::Token	access:private	signature:()
klang::Token::IdentifierStr	include/klang/Lex/Token.h	/^    std::string IdentifierStr;  \/\/ Filled in if tok_identifier$/;"	m	class:klang::Token	access:private
klang::Token::Kind	include/klang/Lex/Token.h	/^    int Kind;$/;"	m	class:klang::Token	access:private
klang::Token::NumVal	include/klang/Lex/Token.h	/^    double NumVal;              \/\/ Filled in if tok_number$/;"	m	class:klang::Token	access:private
klang::UnaryExprAST	include/klang/AST/ASTNodes.h	/^  class UnaryExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::UnaryExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::UnaryExprAST	access:public	signature:(const ExprAST *E)
klang::UnaryExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::UnaryExprAST	access:public	signature:()
klang::UnaryExprAST::Opcode	include/klang/AST/ASTNodes.h	/^    char Opcode;$/;"	m	class:klang::UnaryExprAST	access:private
klang::UnaryExprAST::Operand	include/klang/AST/ASTNodes.h	/^    ExprAST *Operand;$/;"	m	class:klang::UnaryExprAST	access:private
klang::UnaryExprAST::UnaryExprAST	include/klang/AST/ASTNodes.h	/^    UnaryExprAST(char opcode, ExprAST *operand)$/;"	f	class:klang::UnaryExprAST	access:public	signature:(char opcode, ExprAST *operand)
klang::VarExprAST	include/klang/AST/ASTNodes.h	/^  class VarExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::VarExprAST::Body	include/klang/AST/ASTNodes.h	/^    ExprAST *Body;$/;"	m	class:klang::VarExprAST	access:private
klang::VarExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::VarExprAST	access:public	signature:(const ExprAST *E)
klang::VarExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::VarExprAST	access:public	signature:()
klang::VarExprAST::VarExprAST	include/klang/AST/ASTNodes.h	/^    VarExprAST(const std::vector<std::pair<std::string, ExprAST*> > &varnames,$/;"	f	class:klang::VarExprAST	access:public	signature:(const std::vector<std::pair<std::string, ExprAST*> > &varnames, ExprAST *body)
klang::VarExprAST::VarNames	include/klang/AST/ASTNodes.h	/^    std::vector<std::pair<std::string, ExprAST*> > VarNames;$/;"	m	class:klang::VarExprAST	access:private
klang::VariableExprAST	include/klang/AST/ASTNodes.h	/^  class VariableExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
klang::VariableExprAST::classof	include/klang/AST/ASTNodes.h	/^		static bool classof(const ExprAST *E) {$/;"	f	class:klang::VariableExprAST	access:public	signature:(const ExprAST *E)
klang::VariableExprAST::Codegen	include/klang/AST/ASTNodes.h	/^    virtual llvm::Value *Codegen();$/;"	p	class:klang::VariableExprAST	access:public	signature:()
klang::VariableExprAST::getName	include/klang/AST/ASTNodes.h	/^    const std::string &getName() const { return Name; }$/;"	f	class:klang::VariableExprAST	access:public	signature:() const
klang::VariableExprAST::Name	include/klang/AST/ASTNodes.h	/^    std::string Name;$/;"	m	class:klang::VariableExprAST	access:private
klang::VariableExprAST::VariableExprAST	include/klang/AST/ASTNodes.h	/^    VariableExprAST(const std::string &name) : ExprAST(EK_Variable), Name(name) {}$/;"	f	class:klang::VariableExprAST	access:public	signature:(const std::string &name)
KLANG_ASTNODES_H	include/klang/AST/ASTNodes.h	15;"	d
KLANG_DRIVER_H	include/klang/Driver/Driver.h	15;"	d
KLANG_LEXER_H	include/klang/Lex/Lexer.h	15;"	d
KLANG_PARSER_H	include/klang/Parse/Parser.h	15;"	d
KLANG_TOKENKINDS_H	include/klang/Lex/TokenKinds.h	16;"	d
KLANG_TOKEN_H	include/klang/Lex/Token.h	15;"	d
KLANG_TUTORIAL_H	include/klang/Builtin/Tutorial.h	15;"	d
KLANG_UTIL_H	include/klang/Driver/Utils.h	15;"	d
LastChar	include/klang/Lex/Lexer.h	/^    int LastChar;$/;"	m	class:klang::Lexer	access:private
latex_documents	docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	docs/conf.py	/^latex_elements = {$/;"	v
LEVEL	lib/AST/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	lib/Builtin/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	lib/Lex/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	lib/Makefile	/^LEVEL=..$/;"	m
LEVEL	lib/Parse/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	Makefile	/^LEVEL = .$/;"	m
LEVEL	tools/driver/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	tools/Makefile	/^LEVEL=..$/;"	m
Lex	include/klang/Lex/Lexer.h	/^    void Lex(Token &Result);$/;"	p	class:klang::Lexer	access:public	signature:(Token &Result)
Lex	lib/Lex/Lexer.cpp	/^Lexer::Lex(Token &Result) {$/;"	f	class:Lexer	signature:(Token &Result)
Lexer	include/klang/Lex/Lexer.h	/^    Lexer();$/;"	p	class:klang::Lexer	access:public	signature:()
Lexer	include/klang/Lex/Lexer.h	/^  class Lexer {$/;"	c	namespace:klang
Lexer	lib/Lex/Lexer.cpp	/^Lexer::Lexer()$/;"	f	class:Lexer	signature:()
Lexer.cpp	lib/Lex/Lexer.cpp	1;"	F
Lexer.h	include/klang/Lex/Lexer.h	1;"	F
Lexer::Lex	lib/Lex/Lexer.cpp	/^Lexer::Lex(Token &Result) {$/;"	f	class:Lexer	signature:(Token &Result)
Lexer::Lexer	lib/Lex/Lexer.cpp	/^Lexer::Lexer()$/;"	f	class:Lexer	signature:()
LHS	include/klang/AST/ASTNodes.h	/^    ExprAST *LHS, *RHS;$/;"	m	class:klang::BinaryExprAST	access:private
LIBRARYNAME	lib/AST/Makefile	/^LIBRARYNAME=klangAST$/;"	m
LIBRARYNAME	lib/Builtin/Makefile	/^LIBRARYNAME=klangBuiltin$/;"	m
LIBRARYNAME	lib/Lex/Makefile	/^LIBRARYNAME=klangLex$/;"	m
LIBRARYNAME	lib/Parse/Makefile	/^LIBRARYNAME=klangParse$/;"	m
linktodoxygen.html	docs/_static/linktodoxygen.html	1;"	F
LINK_COMPONENTS	tools/driver/Makefile	/^LINK_COMPONENTS = core jit native$/;"	m
ltmain.sh	autoconf/ltmain.sh	1;"	F
Lxr	include/klang/Parse/Parser.h	/^    Lexer &Lxr;$/;"	m	class:klang::Parser	access:private
main	autoconf/config.guess	/^		main()$/;"	f
main	autoconf/config.guess	/^	main ()$/;"	f
main	autoconf/config.guess	/^main ()$/;"	f
main	tools/driver/Driver.cpp	/^int main() {$/;"	f	signature:()
Makefile	docs/Makefile	1;"	F
Makefile	lib/AST/Makefile	1;"	F
Makefile	lib/Builtin/Makefile	1;"	F
Makefile	lib/Lex/Makefile	1;"	F
Makefile	lib/Makefile	1;"	F
Makefile	lib/Parse/Makefile	1;"	F
Makefile	Makefile	1;"	F
Makefile	tools/driver/Makefile	1;"	F
Makefile	tools/Makefile	1;"	F
man_pages	docs/conf.py	/^man_pages = [$/;"	v
master_doc	docs/conf.py	/^master_doc = 'index'$/;"	v
mkinstalldirs	autoconf/mkinstalldirs	1;"	F
Name	include/klang/AST/ASTNodes.h	/^    std::string Name;$/;"	m	class:klang::PrototypeAST	access:private
Name	include/klang/AST/ASTNodes.h	/^    std::string Name;$/;"	m	class:klang::VariableExprAST	access:private
NamedValues	tools/driver/Driver.cpp	/^  std::map<std::string, llvm::AllocaInst*> NamedValues;$/;"	m	namespace:klang	file:
NumberExprAST	include/klang/AST/ASTNodes.h	/^    NumberExprAST(double val) : ExprAST(EK_Number), Val(val) {}$/;"	f	class:klang::NumberExprAST	access:public	signature:(double val)
NumberExprAST	include/klang/AST/ASTNodes.h	/^  class NumberExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
NumberExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *NumberExprAST::Codegen() {$/;"	f	class:NumberExprAST	signature:()
NumVal	include/klang/Lex/Token.h	/^    double NumVal;              \/\/ Filled in if tok_number$/;"	m	class:klang::Token	access:private
Op	include/klang/AST/ASTNodes.h	/^    char Op;$/;"	m	class:klang::BinaryExprAST	access:private
Opcode	include/klang/AST/ASTNodes.h	/^    char Opcode;$/;"	m	class:klang::UnaryExprAST	access:private
Operand	include/klang/AST/ASTNodes.h	/^    ExprAST *Operand;$/;"	m	class:klang::UnaryExprAST	access:private
PAPER	docs/Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
ParseBinOpRHS	include/klang/Parse/Parser.h	/^    ExprAST *ParseBinOpRHS(int ExprPrec, ExprAST *LHS);$/;"	p	class:klang::Parser	access:public	signature:(int ExprPrec, ExprAST *LHS)
ParseBinOpRHS	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseBinOpRHS(int ExprPrec, ExprAST *LHS) {$/;"	f	class:Parser	signature:(int ExprPrec, ExprAST *LHS)
ParseDefinition	include/klang/Parse/Parser.h	/^    FunctionAST *ParseDefinition();$/;"	p	class:klang::Parser	access:public	signature:()
ParseDefinition	lib/Parse/Parser.cpp	/^FunctionAST *Parser::ParseDefinition() {$/;"	f	class:Parser	signature:()
ParseExpression	include/klang/Parse/Parser.h	/^    ExprAST *ParseExpression();$/;"	p	class:klang::Parser	access:public	signature:()
ParseExpression	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseExpression() {$/;"	f	class:Parser	signature:()
ParseExtern	include/klang/Parse/Parser.h	/^    PrototypeAST *ParseExtern();$/;"	p	class:klang::Parser	access:public	signature:()
ParseExtern	lib/Parse/Parser.cpp	/^PrototypeAST *Parser::ParseExtern() {$/;"	f	class:Parser	signature:()
ParseForExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseForExpr();$/;"	p	class:klang::Parser	access:public	signature:()
ParseForExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseForExpr() {$/;"	f	class:Parser	signature:()
ParseIdentifierExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseIdentifierExpr();$/;"	p	class:klang::Parser	access:public	signature:()
ParseIdentifierExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseIdentifierExpr() {$/;"	f	class:Parser	signature:()
ParseIfExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseIfExpr();$/;"	p	class:klang::Parser	access:public	signature:()
ParseIfExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseIfExpr() {$/;"	f	class:Parser	signature:()
ParseNumberExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseNumberExpr();$/;"	p	class:klang::Parser	access:public	signature:()
ParseNumberExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseNumberExpr() {$/;"	f	class:Parser	signature:()
ParseParenExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseParenExpr();$/;"	p	class:klang::Parser	access:public	signature:()
ParseParenExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseParenExpr() {$/;"	f	class:Parser	signature:()
ParsePrimary	include/klang/Parse/Parser.h	/^    ExprAST *ParsePrimary();$/;"	p	class:klang::Parser	access:public	signature:()
ParsePrimary	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParsePrimary() {$/;"	f	class:Parser	signature:()
ParsePrototype	include/klang/Parse/Parser.h	/^    PrototypeAST *ParsePrototype();$/;"	p	class:klang::Parser	access:public	signature:()
ParsePrototype	lib/Parse/Parser.cpp	/^PrototypeAST *Parser::ParsePrototype() {$/;"	f	class:Parser	signature:()
Parser	include/klang/Parse/Parser.h	/^    Parser(Lexer &_Lxr)$/;"	f	class:klang::Parser	access:public	signature:(Lexer &_Lxr)
Parser	include/klang/Parse/Parser.h	/^  class Parser {$/;"	c	namespace:klang
Parser.cpp	lib/Parse/Parser.cpp	1;"	F
Parser.h	include/klang/Parse/Parser.h	1;"	F
Parser::GetNextToken	lib/Parse/Parser.cpp	/^int Parser::GetNextToken() {$/;"	f	class:Parser	signature:()
Parser::Go	lib/Parse/Parser.cpp	/^void Parser::Go() {$/;"	f	class:Parser	signature:()
Parser::HandleDefinition	lib/Parse/Parser.cpp	/^void Parser::HandleDefinition() {$/;"	f	class:Parser	signature:()
Parser::HandleExtern	lib/Parse/Parser.cpp	/^void Parser::HandleExtern() {$/;"	f	class:Parser	signature:()
Parser::HandleTopLevelExpression	lib/Parse/Parser.cpp	/^void Parser::HandleTopLevelExpression() {$/;"	f	class:Parser	signature:()
Parser::ParseBinOpRHS	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseBinOpRHS(int ExprPrec, ExprAST *LHS) {$/;"	f	class:Parser	signature:(int ExprPrec, ExprAST *LHS)
Parser::ParseDefinition	lib/Parse/Parser.cpp	/^FunctionAST *Parser::ParseDefinition() {$/;"	f	class:Parser	signature:()
Parser::ParseExpression	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseExpression() {$/;"	f	class:Parser	signature:()
Parser::ParseExtern	lib/Parse/Parser.cpp	/^PrototypeAST *Parser::ParseExtern() {$/;"	f	class:Parser	signature:()
Parser::ParseForExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseForExpr() {$/;"	f	class:Parser	signature:()
Parser::ParseIdentifierExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseIdentifierExpr() {$/;"	f	class:Parser	signature:()
Parser::ParseIfExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseIfExpr() {$/;"	f	class:Parser	signature:()
Parser::ParseNumberExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseNumberExpr() {$/;"	f	class:Parser	signature:()
Parser::ParseParenExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseParenExpr() {$/;"	f	class:Parser	signature:()
Parser::ParsePrimary	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParsePrimary() {$/;"	f	class:Parser	signature:()
Parser::ParsePrototype	lib/Parse/Parser.cpp	/^PrototypeAST *Parser::ParsePrototype() {$/;"	f	class:Parser	signature:()
Parser::ParseTopLevelExpr	lib/Parse/Parser.cpp	/^FunctionAST *Parser::ParseTopLevelExpr() {$/;"	f	class:Parser	signature:()
Parser::ParseUnary	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseUnary() {$/;"	f	class:Parser	signature:()
Parser::ParseVarExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseVarExpr() {$/;"	f	class:Parser	signature:()
ParseTopLevelExpr	include/klang/Parse/Parser.h	/^    FunctionAST *ParseTopLevelExpr();$/;"	p	class:klang::Parser	access:public	signature:()
ParseTopLevelExpr	lib/Parse/Parser.cpp	/^FunctionAST *Parser::ParseTopLevelExpr() {$/;"	f	class:Parser	signature:()
ParseUnary	include/klang/Parse/Parser.h	/^    ExprAST *ParseUnary();$/;"	p	class:klang::Parser	access:public	signature:()
ParseUnary	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseUnary() {$/;"	f	class:Parser	signature:()
ParseVarExpr	include/klang/Parse/Parser.h	/^    ExprAST *ParseVarExpr();$/;"	p	class:klang::Parser	access:public	signature:()
ParseVarExpr	lib/Parse/Parser.cpp	/^ExprAST *Parser::ParseVarExpr() {$/;"	f	class:Parser	signature:()
Precedence	include/klang/AST/ASTNodes.h	/^    unsigned Precedence;  \/\/ Precedence if a binary op.$/;"	m	class:klang::PrototypeAST	access:private
printd	include/klang/Builtin/Tutorial.h	/^  double printd(double X);$/;"	p	signature:(double X)
printd	lib/Builtin/Tutorial.cpp	/^double printd(double X) {$/;"	f	signature:(double X)
project	docs/conf.py	/^project = u'klang'$/;"	v
Proto	include/klang/AST/ASTNodes.h	/^    PrototypeAST *Proto;$/;"	m	class:klang::FunctionAST	access:private
PrototypeAST	include/klang/AST/ASTNodes.h	/^    PrototypeAST(const std::string &name, const std::vector<std::string> &args,$/;"	f	class:klang::PrototypeAST	access:public	signature:(const std::string &name, const std::vector<std::string> &args, bool isoperator = false, unsigned prec = 0)
PrototypeAST	include/klang/AST/ASTNodes.h	/^  class PrototypeAST {$/;"	c	namespace:klang
PrototypeAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Function *PrototypeAST::Codegen() {$/;"	f	class:PrototypeAST	signature:()
PrototypeAST::CreateArgumentAllocas	lib/AST/ASTNodes.cpp	/^void PrototypeAST::CreateArgumentAllocas(llvm::Function *F) {$/;"	f	class:PrototypeAST	signature:(llvm::Function *F)
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
putchard	include/klang/Builtin/Tutorial.h	/^  double putchard(double X);$/;"	p	signature:(double X)
putchard	lib/Builtin/Tutorial.cpp	/^double putchard(double X) {$/;"	f	signature:(double X)
pygments_style	docs/conf.py	/^pygments_style = 'sphinx'$/;"	v
release	docs/conf.py	/^release = '0.1'$/;"	v
RHS	include/klang/AST/ASTNodes.h	/^    ExprAST *LHS, *RHS;$/;"	m	class:klang::BinaryExprAST	access:private
source_suffix	docs/conf.py	/^source_suffix = '.rst'$/;"	v
SPHINXBUILD	docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	docs/Makefile	/^SPHINXOPTS    =$/;"	m
Start	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
Step	include/klang/AST/ASTNodes.h	/^    ExprAST *Start, *End, *Step, *Body;$/;"	m	class:klang::ForExprAST	access:private
templates_path	docs/conf.py	/^templates_path = ['_templates']$/;"	v
texinfo_documents	docs/conf.py	/^texinfo_documents = [$/;"	v
TheExecutionEngine	tools/driver/Driver.cpp	/^  llvm::ExecutionEngine *TheExecutionEngine;$/;"	m	namespace:klang	file:
TheFPM	tools/driver/Driver.cpp	/^  llvm::FunctionPassManager *TheFPM;$/;"	m	namespace:klang	file:
TheModule	tools/driver/Driver.cpp	/^  llvm::Module *TheModule;$/;"	m	namespace:klang	file:
Then	include/klang/AST/ASTNodes.h	/^    ExprAST *Cond, *Then, *Else;$/;"	m	class:klang::IfExprAST	access:private
tok	include/klang/Lex/TokenKinds.h	/^  namespace tok {$/;"	n	namespace:klang
Tok	include/klang/Parse/Parser.h	/^    Token Tok;$/;"	m	class:klang::Parser	access:private
Token	include/klang/Lex/Token.h	/^  class Token {$/;"	c	namespace:klang
Token.cpp	lib/Lex/Token.cpp	1;"	F
Token.h	include/klang/Lex/Token.h	1;"	F
Token::GetTokPrecedence	lib/Lex/Token.cpp	/^int Token::GetTokPrecedence() {$/;"	f	class:Token	signature:()
TokenKind	include/klang/Lex/TokenKinds.h	/^    enum TokenKind {$/;"	g	namespace:klang::tok
TokenKinds.h	include/klang/Lex/TokenKinds.h	1;"	F
tok_binary	include/klang/Lex/TokenKinds.h	/^      tok_binary = -11,$/;"	e	enum:klang::tok::TokenKind
tok_def	include/klang/Lex/TokenKinds.h	/^      tok_def = -2,$/;"	e	enum:klang::tok::TokenKind
tok_else	include/klang/Lex/TokenKinds.h	/^      tok_else = -8,$/;"	e	enum:klang::tok::TokenKind
tok_eof	include/klang/Lex/TokenKinds.h	/^      tok_eof = -1,$/;"	e	enum:klang::tok::TokenKind
tok_extern	include/klang/Lex/TokenKinds.h	/^      tok_extern = -3,$/;"	e	enum:klang::tok::TokenKind
tok_for	include/klang/Lex/TokenKinds.h	/^      tok_for = -9,$/;"	e	enum:klang::tok::TokenKind
tok_identifier	include/klang/Lex/TokenKinds.h	/^      tok_identifier = -4,$/;"	e	enum:klang::tok::TokenKind
tok_if	include/klang/Lex/TokenKinds.h	/^      tok_if = -6,$/;"	e	enum:klang::tok::TokenKind
tok_in	include/klang/Lex/TokenKinds.h	/^      tok_in = -10,$/;"	e	enum:klang::tok::TokenKind
tok_number	include/klang/Lex/TokenKinds.h	/^      tok_number = -5,$/;"	e	enum:klang::tok::TokenKind
tok_then	include/klang/Lex/TokenKinds.h	/^      tok_then = -7,$/;"	e	enum:klang::tok::TokenKind
tok_unary	include/klang/Lex/TokenKinds.h	/^      tok_unary = -12,$/;"	e	enum:klang::tok::TokenKind
tok_var	include/klang/Lex/TokenKinds.h	/^      tok_var = -13$/;"	e	enum:klang::tok::TokenKind
TOOLNAME	tools/driver/Makefile	/^TOOLNAME=klang$/;"	m
Tutorial.cpp	lib/Builtin/Tutorial.cpp	1;"	F
Tutorial.h	include/klang/Builtin/Tutorial.h	1;"	F
UnaryExprAST	include/klang/AST/ASTNodes.h	/^    UnaryExprAST(char opcode, ExprAST *operand)$/;"	f	class:klang::UnaryExprAST	access:public	signature:(char opcode, ExprAST *operand)
UnaryExprAST	include/klang/AST/ASTNodes.h	/^  class UnaryExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
UnaryExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *UnaryExprAST::Codegen() {$/;"	f	class:UnaryExprAST	signature:()
USEDLIBS	tools/driver/Makefile	/^USEDLIBS = klangParse.a klangAST.a klangLex.a klangBuiltin.a$/;"	m
Utils.cpp	tools/driver/Utils.cpp	1;"	F
Utils.h	include/klang/Driver/Utils.h	1;"	F
Val	include/klang/AST/ASTNodes.h	/^    double Val;$/;"	m	class:klang::NumberExprAST	access:private
VarExprAST	include/klang/AST/ASTNodes.h	/^    VarExprAST(const std::vector<std::pair<std::string, ExprAST*> > &varnames,$/;"	f	class:klang::VarExprAST	access:public	signature:(const std::vector<std::pair<std::string, ExprAST*> > &varnames, ExprAST *body)
VarExprAST	include/klang/AST/ASTNodes.h	/^  class VarExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
VarExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *VarExprAST::Codegen() {$/;"	f	class:VarExprAST	signature:()
VariableExprAST	include/klang/AST/ASTNodes.h	/^    VariableExprAST(const std::string &name) : ExprAST(EK_Variable), Name(name) {}$/;"	f	class:klang::VariableExprAST	access:public	signature:(const std::string &name)
VariableExprAST	include/klang/AST/ASTNodes.h	/^  class VariableExprAST : public ExprAST {$/;"	c	namespace:klang	inherits:ExprAST
VariableExprAST::Codegen	lib/AST/ASTNodes.cpp	/^llvm::Value *VariableExprAST::Codegen() {$/;"	f	class:VariableExprAST	signature:()
VarName	include/klang/AST/ASTNodes.h	/^    std::string VarName;$/;"	m	class:klang::ForExprAST	access:private
VarNames	include/klang/AST/ASTNodes.h	/^    std::vector<std::pair<std::string, ExprAST*> > VarNames;$/;"	m	class:klang::VarExprAST	access:private
version	docs/conf.py	/^version = '0.1'$/;"	v
__sync_synchronize	configure	/^        __sync_synchronize();$/;"	f
~ExprAST	include/klang/AST/ASTNodes.h	/^    virtual ~ExprAST() {}$/;"	f	class:klang::ExprAST	access:public	signature:()
